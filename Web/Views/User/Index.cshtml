@model PagedResult<UserBasicDto>
@{
    ViewData["Title"] = "User Management";
    var searchTerm = ViewData["SearchTerm"] as string;
    var role = ViewData["Role"] as UserRole?;
    var status = ViewData["Status"] as UserStatus?;
}

<div class="max-w-7xl mx-auto px-7 sm:px-6 lg:px-8 py-6">
    <!-- Header -->
    <div class="flex items-center justify-between mb-6">
        <h1 class="text-2xl font-semibold">User Management</h1>
        <a asp-action="Create" class="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg">
            Create New User
        </a>
    </div>

    <!-- Messages -->
    @if (TempData["SuccessMessage"] != null)
    {
        <div class="mb-4 p-4 bg-green-100 text-green-800 rounded-lg">
            @TempData["SuccessMessage"]
        </div>
    }

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="mb-4 p-4 bg-red-100 text-red-800 rounded-lg">
            @TempData["ErrorMessage"]
        </div>
    }

    <!-- Filter Section -->
    <div class="p-6 mb-6 rounded-radius overflow-hidden border border-outline bg-surface-alt text-on-surface">
        <form asp-action="Index" method="get" class="grid grid-cols-1 md:grid-cols-4 gap-4 items-end">
            <!-- Search -->
            <div>
                <label class="block text-sm font-medium mb-1">Search</label>
                <input type="text" name="SearchTerm" value="@searchTerm"
                       placeholder="Name, Email or ID"
                       class="w-full rounded-radius border border-outline bg-surface-alt px-2 py-2 text-sm focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-primary dark:border-outline-dark dark:bg-surface-dark-alt/50 dark:focus-visible:outline-primary-dark" />
            </div>

            <!-- Filters -->
            <div class="md:col-span-2">
                <label class="block text-sm font-medium mb-1">Filters</label>
                <div class="flex gap-2">
                    <!-- Role -->
                    <div class="relative w-full">
                        <select name="Role" class="peer w-full appearance-none rounded-radius border border-outline bg-surface-alt px-4 py-2 text-sm text-on-surface dark:border-outline-dark dark:bg-surface-dark-alt/50 dark:text-on-surface-dark">
                            <option value="">All Roles</option>
                            @foreach (UserRole r in Enum.GetValues(typeof(UserRole)))
                            {
                                <option value="@((int)r)" selected="@(role == r)">@r</option>
                            }
                        </select>
                        <svg class="pointer-events-none absolute right-3 top-1/2 size-4 -translate-y-1/2 text-on-surface/50 dark:text-on-surface-dark/50" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                        </svg>
                    </div>

                    <!-- Status -->
                    <div class="relative w-full">
                        <select name="Status" class="peer w-full appearance-none rounded-radius border border-outline bg-surface-alt px-4 py-2 text-sm text-on-surface dark:border-outline-dark dark:bg-surface-dark-alt/50 dark:text-on-surface-dark">
                            <option value="">All Statuses</option>
                            @foreach (UserStatus s in Enum.GetValues(typeof(UserStatus)))
                            {
                                <option value="@((int)s)" selected="@(status == s)">@s</option>
                            }
                        </select>
                        <svg class="pointer-events-none absolute right-3 top-1/2 size-4 -translate-y-1/2 text-on-surface/50 dark:text-on-surface-dark/50" fill="none" stroke="currentColor" stroke-width="2" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" d="M19.5 8.25l-7.5 7.5-7.5-7.5" />
                        </svg>
                    </div>
                </div>
            </div>

            <!-- Submit -->
            <div>
                <button type="submit" class="rounded-radius bg-primary border border-primary px-4 py-2 text-sm font-medium text-on-primary hover:opacity-75 dark:bg-primary-dark dark:border-primary-dark dark:text-on-primary-dark">
                    Search
                </button>
            </div>
        </form>
    </div>

    <!-- User Table -->
    <div class="overflow-hidden w-full overflow-x-auto rounded-radius border border-outline">
        <div class="flex items-center justify-between px-4 py-3">
            <h2 class="text-lg font-semibold">User List</h2>
            <span class="text-sm">Total: @Model.Count users</span>
        </div>

        @if (Model.Items.Any())
        {
            <div class="overflow-hidden w-full overflow-x-auto rounded-radius border border-outline">
                <table class="w-full text-left text-sm text-on-surface">
                    <thead class="border-b border-outline bg-surface-alt text-sm text-on-surface-strong">
                        <tr>
                            <th class="p-4">ID</th>
                            <th class="p-4">NAME</th>
                            <th class="p-4">EMAIL</th>
                            <th class="p-4">STATUS</th>
                            <th class="p-4">CREATED</th>
                            <th class="p-4">ACTIONS</th>
                        </tr>
                    </thead>
                    <tbody class="divide-y divide-outline bg-surface">
                        @foreach (var user in Model.Items)
                        {
                            <tr>
                                <td class="p-4">@user.Id</td>
                                <td class="p-4 font-medium">@user.FullName</td>
                                <td class="p-4">@user.Email</td>
                                <td class="p-4">
                                    <span class="inline-block px-2 py-1 rounded text-xs font-semibold
                                                @(user.Status == UserStatus.Active ? "bg-green-100 text-green-700" :
                                                                                  user.Status == UserStatus.Suspended ? "bg-yellow-100 text-yellow-800" :
                                                                                  "bg-gray-100 text-gray-600")">
                                @user.Status
                            </span>
                        </td>
                        <td class="p-4">@user.CreatedAt.ToString("yyyy-MM-dd")</td>
                        <td class="p-4">
                            <div class="flex space-x-2">
                                <a asp-action="Details" asp-route-id="@user.Id"
                                   class="rounded-radius p-0.5 font-semibold text-primary hover:opacity-75 dark:text-primary-dark">
                                    <svg xmlns="http://www.w3.org/2000/svg" class="h-4 w-4 inline mr-1" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M15 12a3 3 0 11-6 0 3 3 0 016 0z" />
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M2.458 12C3.732 7.943 7.523 5 12 5s8.268 2.943 9.542 7c-1.274 4.057-5.065 7-9.542 7s-8.268-2.943-9.542-7z" />
                                    </svg>
                                    Details
                                </a>
                            </div>
                        </td>
                    </tr>
                                        }
                    </tbody>
                </table>
            </div>
        }
        else
        {
            <div class="p-6 text-center text-gray-500">
                <i class="bi bi-info-circle me-2"></i> No users found.
            </div>
        }
    </div>

    <!-- Pagination (tách riêng) -->
    @if (Model.Items.Any() && Model.Count > 0)
    {
        <div class="overflow-hidden w-full overflow-x-auto rounded-radius mt-6">
            <div class="flex items-center justify-center">
                <nav aria-label="pagination">
                    <ul class="flex items-center gap-2 text-sm font-medium">
                        @{
                            var totalPages = (int)Math.Ceiling(Model.Count / (double)Model.PageSize);
                            var startPage = Math.Max(1, Model.Page - 2);
                            var endPage = Math.Min(totalPages, startPage + 4);
                            startPage = Math.Max(1, endPage - 4);

                            var routeData = new Dictionary<string, string>();
                            if (ViewBag.SearchTerm != null) routeData["SearchTerm"] = ViewBag.SearchTerm;
                            if (ViewBag.CategoryId != null) routeData["CategoryId"] = ViewBag.CategoryId.ToString();
                        }

                        <!-- Previous -->
                        <li>
                            @if (Model.Page > 1)
                            {
                                routeData["Page"] = (Model.Page - 1).ToString();
                                <a asp-action="Index" asp-all-route-data="@routeData" class="flex items-center rounded-radius p-1 text-on-surface hover:text-primary dark:text-on-surface-dark dark:hover:text-primary-dark">
                                    Previous
                                </a>
                            }
                            else
                            {
                                <span class="flex items-center rounded-radius p-1 text-gray-400 cursor-not-allowed">Previous</span>
                            }
                        </li>

                        <!-- Page numbers -->
                        @for (var i = startPage; i <= endPage; i++)
                        {
                            <li>
                                @if (i == Model.Page)
                                {
                                    <span class="flex size-6 items-center justify-center rounded-radius bg-primary p-1 font-bold text-on-primary dark:bg-primary-dark dark:text-on-primary-dark">@i</span>
                                }
                                else
                                {
                                    routeData["Page"] = i.ToString();
                                    <a asp-action="Index" asp-all-route-data="@routeData" class="flex size-6 items-center justify-center rounded-radius p-1 text-on-surface hover:text-primary dark:text-on-surface-dark dark:hover:text-primary-dark">@i</a>
                                }
                            </li>
                        }

                        <!-- Next -->
                        <li>
                            @if (Model.Page < totalPages)
                            {
                                routeData["Page"] = (Model.Page + 1).ToString();
                                <a asp-action="Index" asp-all-route-data="@routeData" class="flex items-center rounded-radius p-1 text-on-surface hover:text-primary dark:text-on-surface-dark dark:hover:text-primary-dark">
                                    Next
                                </a>
                            }
                            else
                            {
                                <span class="flex items-center rounded-radius p-1 text-gray-400 cursor-not-allowed">Next</span>
                            }
                        </li>
                    </ul>
                </nav>
            </div>
        </div>
    }
</div>
