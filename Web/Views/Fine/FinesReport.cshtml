@model PagedResult<FineBasicDto>
@using Application.Common
@using Application.DTOs
@using Domain.Enums

@{
    ViewData["Title"] = "Fines Report";

    Func<FineStatus, string> GetStatusColorClass = status => status switch
    {
        FineStatus.Pending => "bg-yellow-500/10 text-yellow-400",
        FineStatus.Paid => "bg-green-500/10 text-green-400",
        FineStatus.Waived => "bg-gray-500/10 text-gray-400",
        _ => "bg-blue-500/10 text-blue-400"
    };
}

<div class="max-w-full mx-auto px-4 sm:px-6 lg:px-8 py-8 text-on-surface">
    <div class="sm:flex sm:items-center sm:justify-between mb-6">
        <div class="sm:flex-auto">
            <h1 class="text-3xl font-bold">@ViewData["Title"]</h1>
            <p class="mt-2 text-sm text-on-surface-weak">
                A comprehensive report of all fines in the library system.
            </p>
        </div>
        <!-- CẬP NHẬT Ở ĐÂY -->
        <div class="mt-4 sm:mt-0 flex items-center space-x-3">
            <a asp-action="DownloadFinesReportCsv" class="inline-flex items-center justify-center rounded-md border border-transparent bg-primary px-4 py-2 text-sm font-medium text-white shadow-sm hover:bg-primary-dark">
                <i class="bi bi-download mr-2"></i> Export CSV
            </a>

            <a asp-action="Index" asp-controller="Fine" class="inline-flex items-center justify-center rounded-md border border-outline px-4 py-2 text-sm font-medium shadow-sm hover:bg-white/5">
                ← Back to Fine Management
            </a>
        </div>
    </div>

    @if (TempData["ErrorMessage"] != null)
    {
        <div class="mb-6 p-4 bg-red-100 text-red-800 border border-red-300 rounded-md">@TempData["ErrorMessage"]</div>
    }

    <div class="bg-surface-alt rounded-lg shadow overflow-hidden">
        <div class="overflow-x-auto">
            <table class="min-w-full divide-y divide-outline">
                <thead class="bg-surface">
                    <tr>
                        <th scope="col" class="py-3.5 pl-4 pr-3 text-left text-sm font-semibold sm:pl-6">Fine Details</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold">Member</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold">Amount</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold">Date Issued</th>
                        <th scope="col" class="px-3 py-3.5 text-left text-sm font-semibold">Status</th>
                        <th scope="col" class="relative py-3.5 pl-3 pr-4 sm:pr-6"><span class="sr-only">View</span></th>
                    </tr>
                </thead>
                <tbody class="divide-y divide-outline">
                    @if (Model != null && Model.Items.Any())
                    {
                        foreach (var fine in Model.Items)
                        {
                            <tr>
                                <td class="whitespace-nowrap py-4 pl-4 pr-3 text-sm sm:pl-6">
                                    <div class="font-medium">#@fine.Id - @fine.Type.ToString()</div>
                                    <div class="text-xs text-on-surface-weak truncate max-w-xs" title="@fine.Description">@fine.Description</div>
                                </td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm text-on-surface-weak">
                                    <div class="font-semibold text-on-surface">@fine.MemberName</div>
                                    <div>ID: @fine.MemberId</div>
                                </td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm font-bold">@fine.Amount.ToString("C")</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm">@fine.FineDate.ToString("dd MMM, yyyy")</td>
                                <td class="whitespace-nowrap px-3 py-4 text-sm">
                                    <span class="inline-flex items-center rounded-full px-2.5 py-0.5 text-xs font-medium @GetStatusColorClass(fine.Status)">
                                        @fine.Status.ToString()
                                    </span>
                                </td>
                                <td class="relative whitespace-nowrap py-4 pl-3 pr-4 text-right text-sm font-medium sm:pr-6">
                                    <a asp-action="Details" asp-route-id="@fine.Id" class="text-primary hover:text-primary-dark">View →</a>
                                </td>
                            </tr>
                        }
                    }
                    else
                    {
                        <tr>
                            <td colspan="6" class="px-6 py-20 text-center">
                                <div class="flex flex-col items-center">
                                    <svg class="h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor" aria-hidden="true">
                                        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M9 17v-2m3 2v-4m3 4v-6m2 10H7a2 2 0 01-2-2V5a2 2 0 012-2h5.586a1 1 0 01.707.293l5.414 5.414a1 1 0 01.293.707V19a2 2 0 01-2 2z"></path>
                                    </svg>
                                    <h3 class="mt-2 text-sm font-semibold">No Fines to Report</h3>
                                    <p class="mt-1 text-sm text-gray-500">There are currently no fines in the system.</p>
                                </div>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

    @if (Model != null && Model.TotalPages > 1)
    {
        <div class="mt-6 flex items-center justify-between">
            <div class="text-sm text-on-surface-weak">
                Showing @(((Model.Page - 1) * Model.PageSize) + 1)
                to @(Math.Min(Model.Page * Model.PageSize, Model.Count))
                of @Model.Count results
            </div>
            <nav class="isolate inline-flex -space-x-px rounded-md shadow-sm" aria-label="Pagination">
                <a asp-action="FinesReport" asp-route-page="@(Model.Page - 1)" class="relative inline-flex items-center rounded-l-md px-3 py-2 text-sm font-semibold ring-1 ring-inset ring-outline hover:bg-gray-50 @(Model.HasPreviousPage ? "" : "pointer-events-none opacity-40")">
                    Previous
                </a>
                <span class="relative z-10 inline-flex items-center bg-primary px-4 py-2 text-sm font-semibold text-white">Page @Model.Page of @Model.TotalPages</span>
                <a asp-action="FinesReport" asp-route-page="@(Model.Page + 1)" class="relative inline-flex items-center rounded-r-md px-3 py-2 text-sm font-semibold ring-1 ring-inset ring-outline hover:bg-gray-50 @(Model.HasNextPage ? "" : "pointer-events-none opacity-40")">
                    Next
                </a>
            </nav>
        </div>
    }
</div>
